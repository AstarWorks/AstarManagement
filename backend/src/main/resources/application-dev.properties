# Development profile configuration for devcontainer environment
# This profile is specifically designed for Docker-outside-of-Docker (DooD) scenarios

spring.application.name=AsterManagement

# Database Configuration for Devcontainer
# Uses host.docker.internal to reach services running on the host Docker daemon
spring.datasource.url=jdbc:postgresql://${DB_HOST:host.docker.internal}:${DB_PORT:5432}/astermanagement
spring.datasource.username=${DB_USERNAME:astermanagement}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Connection Pool Configuration
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.connection-test-query=SELECT 1

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# JPA Performance Optimization
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.query.in_clause_parameter_padding=true
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.jdbc.fetch_size=100

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

# Spring Data Auditing
spring.jpa.properties.hibernate.envers.audit_table_suffix=_audit
spring.jpa.properties.hibernate.envers.revision_field_name=rev
spring.jpa.properties.hibernate.envers.revision_type_field_name=revtype

# Redis Configuration for Devcontainer
# Uses host.docker.internal to reach Redis running on the host Docker daemon
spring.data.redis.host=${REDIS_HOST:host.docker.internal}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=2000ms
spring.data.redis.connect-timeout=2000ms
spring.data.redis.lettuce.pool.max-active=10
spring.data.redis.lettuce.pool.max-idle=10
spring.data.redis.lettuce.pool.min-idle=1

# Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=600000
spring.cache.redis.cache-null-values=false
spring.cache.redis.use-key-prefix=true
spring.cache.redis.key-prefix=astermanagement:

# Disable Docker Compose integration (we're using external services)
spring.docker.compose.enabled=false

# Enable SQL logging for development
logging.level.org.springframework.jdbc.core=DEBUG
logging.level.org.hibernate.SQL=DEBUG