package com.astarworks.astarmanagement.config

import com.nimbusds.jose.JWSAlgorithm
import com.nimbusds.jose.jwk.source.ImmutableJWKSet
import com.nimbusds.jose.jwk.source.JWKSource
import com.nimbusds.jose.proc.JWSVerificationKeySelector
import com.nimbusds.jose.proc.SecurityContext
import com.nimbusds.jwt.proc.DefaultJWTProcessor
import org.springframework.beans.factory.annotation.Value
import org.springframework.boot.test.context.TestConfiguration
import org.springframework.boot.test.web.server.LocalServerPort
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Primary
import org.springframework.context.annotation.Profile
import org.springframework.security.oauth2.jwt.JwtDecoder
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder
import org.springframework.web.client.RestTemplate
import com.nimbusds.jose.jwk.JWKSet
import com.nimbusds.jose.jwk.RSAKey
import java.net.URL

/**
 * Test-specific security configuration that provides a JWT decoder
 * configured to use the mock auth service running on the test server port.
 */
@TestConfiguration
class TestSecurityConfig {
    
    @LocalServerPort
    private var port: Int = 0
    
    /**
     * Override JWT decoder to use mock JWKS endpoint on the actual test server port.
     * This ensures JWT tokens generated by MockAuthService are properly validated.
     */
    @Bean
    @Primary
    @Profile("local")
    fun mockAuthJwtDecoder(): JwtDecoder {
        // Use the actual test server port for JWKS URI
        val jwksUri = "http://localhost:$port/mock-auth/.well-known/jwks.json"
        
        val jwtDecoder = NimbusJwtDecoder.withJwkSetUri(jwksUri).build()
        
        // Disable issuer validation for testing since mock tokens use localhost:8080
        jwtDecoder.setJwtValidator { jwt ->
            // Accept all JWTs that are properly signed with the mock key
            // In tests, we only care about signature validation, not issuer validation
            null
        }
        
        return jwtDecoder
    }
}