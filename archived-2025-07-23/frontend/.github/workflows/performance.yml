name: Performance Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.16
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build application
        run: bun run build
        env:
          NUXT_PUBLIC_API_BASE: ${{ secrets.API_BASE_URL }}
      
      - name: Run Lighthouse CI
        run: |
          bun run perf:lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('.lighthouseci/manifest.json', 'utf8'));
            const summary = results[0].summary;
            
            const comment = `## 🚀 Lighthouse Performance Results
            
            | Metric | Score |
            |--------|-------|
            | Performance | ${summary.performance * 100}% |
            | Accessibility | ${summary.accessibility * 100}% |
            | Best Practices | ${summary['best-practices'] * 100}% |
            | SEO | ${summary.seo * 100}% |
            
            [View detailed report](${results[0].url})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.16
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build and analyze bundle
        run: |
          bun run build
          bun run analyze
      
      - name: Check bundle size
        run: |
          # Check if bundle exceeds limits
          TOTAL_SIZE=$(find .output/public/_nuxt -name "*.js" -o -name "*.css" | xargs du -ch | grep total | awk '{print $1}' | sed 's/K//')
          
          if [ "$TOTAL_SIZE" -gt "500" ]; then
            echo "❌ Bundle size exceeds 500KB limit: ${TOTAL_SIZE}KB"
            exit 1
          else
            echo "✅ Bundle size within limits: ${TOTAL_SIZE}KB"
          fi
      
      - name: Upload bundle stats
        uses: actions/upload-artifact@v3
        with:
          name: bundle-stats
          path: |
            .nuxt/analyze/
            .output/stats.json
          retention-days: 30

  performance-tests:
    name: Core Web Vitals Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.16
      
      - name: Install dependencies
        run: |
          bun install --frozen-lockfile
          bunx playwright install chromium
      
      - name: Build application
        run: bun run build
      
      - name: Start preview server
        run: |
          bun run preview &
          sleep 10
      
      - name: Run performance tests
        run: bun run perf:test
        env:
          BASE_URL: http://localhost:3000
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: |
            test-results/
            performance-reports/
          retention-days: 30

  load-testing:
    name: k6 Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run k6 load test
        uses: grafana/k6-action@v0.3.0
        with:
          filename: k6/load-test.js
          flags: --out json=load-test-results.json
        env:
          BASE_URL: ${{ secrets.STAGING_URL }}
          API_URL: ${{ secrets.API_URL }}
      
      - name: Upload k6 results
        uses: actions/upload-artifact@v3
        with:
          name: k6-results
          path: load-test-results.json
          retention-days: 30
      
      - name: Check performance thresholds
        run: |
          # Parse k6 results and check thresholds
          node -e "
            const results = require('./load-test-results.json');
            const failed = results.metrics.http_req_failed.values.rate;
            const p95 = results.metrics.http_req_duration.values['p(95)'];
            
            if (failed > 0.05) {
              console.error('❌ Error rate exceeds 5%:', (failed * 100).toFixed(2) + '%');
              process.exit(1);
            }
            
            if (p95 > 200) {
              console.error('❌ p95 response time exceeds 200ms:', p95.toFixed(2) + 'ms');
              process.exit(1);
            }
            
            console.log('✅ Load test passed!');
          "

  memory-profiling:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.16
      
      - name: Install dependencies
        run: |
          bun install --frozen-lockfile
          bunx playwright install chromium
      
      - name: Build application
        run: bun run build
      
      - name: Start preview server
        run: |
          bun run preview &
          sleep 10
      
      - name: Run memory profiler
        run: bun run perf:memory
        timeout-minutes: 10
        env:
          BASE_URL: http://localhost:3000
      
      - name: Check memory results
        run: |
          # Check if memory leak was detected
          REPORT=$(ls -t performance-reports/memory-profile-*.json | head -1)
          
          node -e "
            const report = require('./${process.argv[1]}');
            const analysis = report.analysis;
            
            if (analysis.memoryLeakDetected) {
              console.error('❌ Memory leak detected!');
              analysis.recommendations.forEach(r => console.error('  - ' + r));
              process.exit(1);
            }
            
            console.log('✅ No memory leaks detected');
          " "$REPORT"
      
      - name: Upload memory profile
        uses: actions/upload-artifact@v3
        with:
          name: memory-profile
          path: performance-reports/
          retention-days: 30

  performance-summary:
    name: Performance Summary
    needs: [lighthouse, bundle-analysis, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate performance report
        run: |
          echo "# Performance Test Summary" > performance-summary.md
          echo "" >> performance-summary.md
          echo "## Test Results" >> performance-summary.md
          echo "" >> performance-summary.md
          
          if [ -d "lighthouse-results" ]; then
            echo "### Lighthouse CI ✅" >> performance-summary.md
          else
            echo "### Lighthouse CI ❌" >> performance-summary.md
          fi
          
          if [ -d "bundle-stats" ]; then
            echo "### Bundle Analysis ✅" >> performance-summary.md
          else
            echo "### Bundle Analysis ❌" >> performance-summary.md
          fi
          
          if [ -d "performance-test-results" ]; then
            echo "### Core Web Vitals ✅" >> performance-summary.md
          else
            echo "### Core Web Vitals ❌" >> performance-summary.md
          fi
      
      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: performance-summary
          path: performance-summary.md
          retention-days: 30