<?xml version="1.0"?>
<ruleset name="Aster Management Security Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0
                             https://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>
        Security-focused PMD ruleset for Aster Management Spring Boot application.
        Focuses on common security vulnerabilities and Spring Boot security patterns.
    </description>

    <!-- Core Security Rules -->
    <rule ref="category/java/security.xml">
        <exclude name="HardCodedCryptoKey"/>
        <!-- Exclude if using proper Spring configuration -->
    </rule>

    <!-- Error Prone Rules with Security Implications -->
    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals"/>
    <rule ref="category/java/errorprone.xml/EqualsNull"/>
    <rule ref="category/java/errorprone.xml/UselessStringValueOf"/>
    <rule ref="category/java/errorprone.xml/UseProperClassLoader"/>
    
    <!-- Best Practices with Security Focus -->
    <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>
    <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>
    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod"/>

    <!-- Design Rules Affecting Security -->
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
        <properties>
            <property name="problemDepth" value="4"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <properties>
            <property name="minimum" value="8"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/ExcessiveMethodLength">
        <properties>
            <property name="minimum" value="100"/>
        </properties>
    </rule>

    <!-- Performance Rules with Security Implications -->
    <rule ref="category/java/performance.xml/StringInstantiation"/>
    <rule ref="category/java/performance.xml/StringToString"/>
    <rule ref="category/java/performance.xml/InefficientStringBuffering"/>
    
    <!-- Custom Security Rules for Spring Boot -->
    
    <!-- SQL Injection Prevention -->
    <rule name="PreventSQLInjection"
          language="java"
          message="Potential SQL injection vulnerability - use parameterized queries"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            Detect potential SQL injection vulnerabilities by looking for string concatenation in SQL queries.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                    //PrimaryExpression[
                        PrimaryPrefix/Name[
                            contains(@Image, 'query') or 
                            contains(@Image, 'sql') or 
                            contains(@Image, 'execute')
                        ]
                    ]/following-sibling::PrimarySuffix[
                        contains(@Image, '+') or 
                        contains(@Image, 'concat')
                    ]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
                // Bad - potential SQL injection
                String sql = "SELECT * FROM users WHERE id = " + userId;
                
                // Good - parameterized query
                String sql = "SELECT * FROM users WHERE id = ?";
            ]]>
        </example>
    </rule>

    <!-- Hardcoded Credentials Detection -->
    <rule name="HardcodedCredentials"
          language="java"
          message="Potential hardcoded credentials found"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            Detect hardcoded passwords, keys, or tokens in the code.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                    //VariableDeclarator[
                        VariableDeclaratorId[
                            contains(translate(@Image, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'password') or
                            contains(translate(@Image, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'secret') or
                            contains(translate(@Image, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'key') or
                            contains(translate(@Image, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'token')
                        ]
                    ]/VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Literal[
                        string-length(@Image) > 10
                    ]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
                // Bad - hardcoded password
                String password = "mySecretPassword123";
                
                // Good - externalized configuration
                @Value("${app.password}")
                String password;
            ]]>
        </example>
    </rule>

    <!-- Insecure Random Usage -->
    <rule name="InsecureRandomUsage"
          language="java"
          message="Use SecureRandom instead of Random for security-sensitive operations"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            Detect usage of java.util.Random which is not cryptographically secure.
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                    //ImportDeclaration[Name[@Image='java.util.Random']] |
                    //AllocationExpression[ClassOrInterfaceType[@Image='Random']]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
                // Bad - not cryptographically secure
                Random random = new Random();
                
                // Good - cryptographically secure
                SecureRandom secureRandom = new SecureRandom();
            ]]>
        </example>
    </rule>

    <!-- Spring Security Configuration Issues -->
    <rule name="SpringSecurityConfigIssues"
          language="java"
          message="Potential Spring Security misconfiguration"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            Detect potential Spring Security misconfigurations.
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                    //MethodDeclaration[
                        contains(@Name, 'configure') or
                        contains(@Name, 'filterChain')
                    ]//PrimaryExpression[
                        PrimaryPrefix/Name[
                            contains(@Image, 'permitAll') and
                            not(contains(@Image, 'authenticated'))
                        ]
                    ]
                    ]]>
                </value>
            </property>
        </properties>
        <example>
            <![CDATA[
                // Potentially risky - review if permitAll() is intended
                http.authorizeHttpRequests(auth -> auth
                    .requestMatchers("/**").permitAll()
                );
            ]]>
        </example>
    </rule>

    <!-- Exclude Generated and Test Code -->
    <exclude-pattern>.*/src/test/.*</exclude-pattern>
    <exclude-pattern>.*/build/generated/.*</exclude-pattern>
    <exclude-pattern>.*/target/generated-sources/.*</exclude-pattern>
    
    <!-- Exclude specific files that may have legitimate security exceptions -->
    <exclude-pattern>.*/TestDataBuilder\.java</exclude-pattern>
    <exclude-pattern>.*/.*Test\.java</exclude-pattern>
    <exclude-pattern>.*/.*TestConfiguration\.java</exclude-pattern>

</ruleset>