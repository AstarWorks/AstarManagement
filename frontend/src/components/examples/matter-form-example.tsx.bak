'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { Scale, FileText, User, Calendar, AlertTriangle } from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'

import { CreateMatterSchema, type CreateMatterRequest } from '@/lib/schemas/matter-schemas'
import { useMatterStore } from '@/stores/matter-store'
import { useUiStore } from '@/stores/ui-store'

/**
 * Comprehensive example component demonstrating integrated library usage
 * 
 * Features demonstrated:
 * - Zod schema validation with react-hook-form
 * - Zustand state management (matter store and UI store)
 * - Lucide-React icons throughout the interface
 * - shadcn/ui components integration
 * - TypeScript type safety
 * - Agent-native patterns (documented for AI consumption)
 */
export function MatterFormExample() {
  const { addMatter, isLoading, setLoading } = useMatterStore()
  const { theme } = useUiStore()
  const [isSubmitting, setIsSubmitting] = useState(false)

  const form = useForm<CreateMatterRequest>({
    resolver: zodResolver(CreateMatterSchema),
    defaultValues: {
      title: '',
      clientName: '',
      description: '',
      priority: 'MEDIUM',
      tags: [],
    },
  })

  const onSubmit = async (data: CreateMatterRequest) => {
    setIsSubmitting(true)
    setLoading(true)
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      // Transform form data to Matter entity
      const newMatter = {
        id: crypto.randomUUID(),
        caseNumber: data.caseNumber,
        title: data.title,
        clientName: data.clientName,
        status: 'INITIAL_CONSULTATION' as const,
        priority: data.priority,
        assignedLawyerId: data.assignedLawyerId,
        assignedLawyerName: data.assignedLawyerId ? 'John Doe' : undefined,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      }
      
      // Add to Zustand store
      addMatter(newMatter)
      
      // Reset form
      form.reset()
      
      console.log('✅ Matter created successfully:', newMatter)
    } catch (error) {
      console.error('❌ Failed to create matter:', error)
    } finally {
      setIsSubmitting(false)
      setLoading(false)
    }
  }

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'URGENT':
        return <AlertTriangle className="size-4 text-red-500" />
      case 'HIGH':
        return <AlertTriangle className="size-4 text-orange-500" />
      case 'MEDIUM':
        return <FileText className="size-4 text-blue-500" />
      case 'LOW':
        return <FileText className="size-4 text-gray-500" />
      default:
        return <FileText className="size-4" />
    }
  }

  return (
    <div className="max-w-2xl mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Scale className="size-5 text-primary" />
            Matter Creation Example
          </CardTitle>
          <CardDescription>
            Demonstrates integration of Zod validation, Zustand state management, 
            Lucide-React icons, and shadcn/ui components
          </CardDescription>
        </CardHeader>
        
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Case Number Field */}
              <FormField
                control={form.control}
                name="caseNumber"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center gap-2">
                      <FileText className="size-4" />
                      Case Number
                    </FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="2025-CV-0001" 
                        {...field} 
                        className="font-mono"
                      />
                    </FormControl>
                    <FormDescription>
                      Format: YYYY-TT-NNNN (TT: CV=Civil, CR=Criminal, FA=Family, IP=Intellectual Property)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Title Field */}
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Matter Title</FormLabel>
                    <FormControl>
                      <Input placeholder="Contract Dispute - ABC Corp vs. XYZ Ltd" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Client Name Field */}
              <FormField
                control={form.control}
                name="clientName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center gap-2">
                      <User className="size-4" />
                      Client Name
                    </FormLabel>
                    <FormControl>
                      <Input placeholder="ABC Corporation" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Priority Field */}
              <FormField
                control={form.control}
                name="priority"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center gap-2">
                      {getPriorityIcon(field.value)}
                      Priority Level
                    </FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select priority level" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="URGENT">
                          <div className="flex items-center gap-2">
                            <AlertTriangle className="size-4 text-red-500" />
                            <span>Urgent</span>
                            <Badge variant="destructive" className="ml-auto">
                              Critical
                            </Badge>
                          </div>
                        </SelectItem>
                        <SelectItem value="HIGH">
                          <div className="flex items-center gap-2">
                            <AlertTriangle className="size-4 text-orange-500" />
                            <span>High</span>
                          </div>
                        </SelectItem>
                        <SelectItem value="MEDIUM">
                          <div className="flex items-center gap-2">
                            <FileText className="size-4 text-blue-500" />
                            <span>Medium</span>
                          </div>
                        </SelectItem>
                        <SelectItem value="LOW">
                          <div className="flex items-center gap-2">
                            <FileText className="size-4 text-gray-500" />
                            <span>Low</span>
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Description Field */}
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Brief description of the matter..."
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Optional detailed description of the legal matter
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Filing Date Field */}
              <FormField
                control={form.control}
                name="filingDate"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center gap-2">
                      <Calendar className="size-4" />
                      Filing Date
                    </FormLabel>
                    <FormControl>
                      <Input
                        type="date"
                        {...field}
                        className="block"
                      />
                    </FormControl>
                    <FormDescription>
                      Date when the matter was or will be filed with the court
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Submit Button */}
              <div className="flex items-center justify-between pt-4">
                <div className="text-sm text-muted-foreground">
                  Form validation powered by Zod • State management by Zustand
                </div>
                <Button type="submit" disabled={isSubmitting || isLoading}>
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent mr-2" />
                      Creating...
                    </>
                  ) : (
                    <>
                      <Scale className="size-4 mr-2" />
                      Create Matter
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>

      {/* Form State Display */}
      <Card>
        <CardHeader>
          <CardTitle className="text-sm">Development Debug Panel</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2 text-xs font-mono">
            <div>
              <strong>Form Valid:</strong> {form.formState.isValid ? '✅' : '❌'}
            </div>
            <div>
              <strong>Form Errors:</strong> {Object.keys(form.formState.errors).length}
            </div>
            <div>
              <strong>UI Theme:</strong> {theme.mode}
            </div>
            <div>
              <strong>Store Loading:</strong> {isLoading ? '🔄' : '✅'}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

/**
 * Agent-Native CLI Interface Documentation
 * 
 * This component can be operated via CLI commands:
 * 
 * ```bash
 * # Create a new matter (example)
 * curl -X POST /api/matters \
 *   -H "Content-Type: application/json" \
 *   -d '{
 *     "caseNumber": "2025-CV-0001",
 *     "title": "Contract Dispute",
 *     "clientName": "ABC Corporation",
 *     "priority": "HIGH"
 *   }'
 * 
 * # Validate matter data
 * echo '{"title":"Test","clientName":"John"}' | zod-cli validate CreateMatterSchema
 * ```
 * 
 * State Management CLI:
 * ```javascript
 * // Access Zustand store in development
 * useMatterStore.getState().addMatter(matterData)
 * useMatterStore.getState().matters.length
 * ```
 */