/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/workspaces/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workspace
         * @description Retrieves a specific workspace by ID
         */
        get: operations["getWorkspace"];
        /**
         * Update workspace
         * @description Updates an existing workspace
         */
        put: operations["updateWorkspace"];
        post?: never;
        /**
         * Delete workspace
         * @description Permanently deletes a workspace and all its contents
         */
        delete: operations["deleteWorkspace"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user information
         * @description Retrieves the authenticated user's details including profile
         */
        get: operations["getCurrentUser"];
        /**
         * Update current user information
         * @description Updates the authenticated user's information
         */
        put: operations["updateCurrentUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile
         * @description Retrieves the authenticated user's profile information
         */
        get: operations["getCurrentUserProfile"];
        /**
         * Update current user profile
         * @description Updates or creates the authenticated user's profile information
         */
        put: operations["updateCurrentUserProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-roles/{userId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserRoles"];
        put: operations["setUserRoles"];
        post: operations["assignRoles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTenantById"];
        put: operations["updateTenant"];
        post?: never;
        delete: operations["deactivateTenant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get table
         * @description Retrieves a specific table by ID
         */
        get: operations["getTable"];
        /**
         * Update table
         * @description Updates an existing table
         */
        put: operations["updateTable"];
        post?: never;
        /**
         * Delete table
         * @description Permanently deletes a table and all its records
         */
        delete: operations["deleteTable"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/properties/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update property
         * @description Updates an existing property in a table
         */
        put: operations["updateProperty"];
        post?: never;
        /**
         * Remove property
         * @description Removes a property from a table
         */
        delete: operations["removeProperty"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/properties/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reorder properties
         * @description Changes the display order of properties in a table
         */
        put: operations["reorderProperties"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPermissions"];
        put: operations["syncPermissions"];
        post: operations["grantPermissions"];
        delete: operations["revokePermissions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRole"];
        put: operations["updateRole"];
        post?: never;
        delete: operations["deleteRole"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["reorderRoles"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get record
         * @description Retrieves a specific record by ID
         */
        get: operations["getRecord"];
        /**
         * Update record
         * @description Updates an existing record
         */
        put: operations["updateRecord"];
        post?: never;
        /**
         * Delete record
         * @description Permanently deletes a record
         */
        delete: operations["deleteRecord"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/{id}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move record
         * @description Changes the position of a record
         */
        put: operations["moveRecord"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/table/{tableId}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reorder records
         * @description Sets a new order for multiple records
         */
        put: operations["reorderRecords"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/bulk-field-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Bulk update field
         * @description Updates a specific field across multiple records
         */
        put: operations["bulkUpdateField"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update records in batch
         * @description Updates multiple records in a single operation
         */
        put: operations["updateRecordsBatch"];
        /**
         * Create records in batch
         * @description Creates multiple records in a single operation
         */
        post: operations["createRecordsBatch"];
        /**
         * Delete records in batch
         * @description Deletes multiple records in a single operation
         */
        delete: operations["deleteRecordsBatch"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workspaces
         * @description Retrieves all workspaces for the current tenant
         */
        get: operations["listWorkspaces"];
        put?: never;
        /**
         * Create workspace
         * @description Creates a new workspace for the current tenant
         */
        post: operations["createWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workspaces/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create default workspace
         * @description Creates a default workspace for tenant onboarding
         */
        post: operations["createDefaultWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/sync-auth0": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync users with Auth0
         * @description Manually synchronizes user data with Auth0 (admin only)
         */
        post: operations["syncWithAuth0"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-roles/me/permissions/check-resource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["checkMyResourceAccess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllTenants"];
        put?: never;
        post: operations["createTenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenants/{id}/link-auth0": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["linkAuth0Organization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenants/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["activateTenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create table
         * @description Creates a new table in a workspace
         */
        post: operations["createTable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add property
         * @description Adds a new property to a table
         */
        post: operations["addProperty"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import data
         * @description Imports data into an existing table
         */
        post: operations["importData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Duplicate table
         * @description Creates a copy of an existing table
         */
        post: operations["duplicateTable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/from-template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create table from template
         * @description Creates a new table using a predefined template
         */
        post: operations["createTableFromTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRoles"];
        put?: never;
        post: operations["createRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["validatePermissions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/copy-from/{sourceRoleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["copyPermissions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{id}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["duplicateRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["validateRoleCreation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create record
         * @description Creates a new record in a table
         */
        post: operations["createRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate record data
         * @description Validates record data against table schema without saving
         */
        post: operations["validateRecordData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/table/{tableId}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search records
         * @description Advanced search with complex filtering and sorting
         */
        post: operations["searchRecords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/table/{tableId}/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Filter records
         * @description Searches and filters records based on criteria
         */
        post: operations["filterRecords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy records
         * @description Copies one or more records within or across tables
         */
        post: operations["copyRecords"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["completeSetup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/setup/create-default-workspace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createDefaultWorkspace_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workspaces/{id}/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workspace statistics
         * @description Retrieves detailed statistics for a workspace
         */
        get: operations["getWorkspaceStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workspaces/quota": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workspace quota
         * @description Retrieves workspace quota information for the tenant
         */
        get: operations["getWorkspaceQuota"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users in tenant
         * @description Retrieves all users in the current tenant (admin only)
         */
        get: operations["listUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieves a specific user's information
         */
        get: operations["getUserById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{userId}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Retrieves a specific user's profile information
         */
        get: operations["getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-roles/{userId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-roles/me/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-roles/me/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyPermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-roles/me/permissions/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["checkMyPermission"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenants/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTenantBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenants/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCurrentTenant"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tenants/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getActiveTenants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get table statistics
         * @description Retrieves statistical information about a table
         */
        get: operations["getTableStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get table schema
         * @description Retrieves the schema definition of a table
         */
        get: operations["getTableSchema"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/{id}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export table
         * @description Exports a table's schema and optionally its data
         */
        get: operations["exportTable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tables/workspace/{workspaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tables in workspace
         * @description Retrieves all tables in a specific workspace
         */
        get: operations["listTables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPermissionSuggestions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/effective": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEffectivePermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/compare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["comparePermissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["checkPermission"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{id}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["exportRole"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/by-permission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRolesByPermission"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/table/{tableId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List records
         * @description Retrieves records from a table with pagination
         */
        get: operations["listRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/table/{tableId}/paged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paginated records
         * @description Retrieves records with advanced pagination support
         */
        get: operations["getRecordsPaged"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/table/{tableId}/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Count records
         * @description Gets the total number of records in a table
         */
        get: operations["countRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List my workspaces
         * @description Gets all workspaces/tenants accessible to the authenticated user
         */
        get: operations["getMyWorkspaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List my tenants
         * @description Legacy endpoint - use /my-workspaces instead
         */
        get: operations["getMyTenants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/viewer-only": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["viewerOnly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/user-only": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["userOnly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["publicEndpoint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/permission/table-view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tableView"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/permission/table-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tableDelete"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/permission/settings-manage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["settingsManage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/permission/document-view-team": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documentViewTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/permission/document-edit-own": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["documentEditOwn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/permission/any-view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["anyView"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/hybrid/table-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tableCreateHybrid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/authenticated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["authenticatedEndpoint"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/admin-or-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["adminOrUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/test/admin-only": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["adminOnly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/setup/my-tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyTenants_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCurrentUser_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/claims": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getJwtClaims"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/business-context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBusinessContext"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user-roles/{userId}/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["removeRole"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/{permission}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["revokePermission"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/roles/{roleId}/permissions/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["revokeAllPermissions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/records/table/{tableId}/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear table
         * @description Removes all records from a table
         */
        delete: operations["clearTable"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        JsonElement: unknown;
        JsonObject: {
            values?: components["schemas"]["JsonElement"][];
            empty?: boolean;
            /** Format: int32 */
            size?: number;
            entries?: {
                value?: components["schemas"]["JsonElement"];
                key?: string;
            }[];
            keys?: string[];
        } & {
            [key: string]: components["schemas"]["JsonElement"];
        };
        WorkspaceUpdateRequest: {
            name?: string;
            description?: string;
            settings?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
        };
        WorkspaceResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            tenantId?: string;
            name?: string;
            description?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            teamId?: string;
            /** Format: int32 */
            tableCount?: number;
            /** Format: int64 */
            recordCount?: number;
            settings?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserUpdateRequest: {
            /** Format: email */
            email: string;
        };
        UserResponse: {
            /** Format: uuid */
            id?: string;
            auth0Sub?: string;
            email?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserProfileUpdateRequest: {
            displayName?: string;
            avatarUrl?: string;
        };
        UserProfileResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userId?: string;
            displayName?: string;
            avatarUrl?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserRoleAssignmentRequest: {
            roleIds?: string[];
        };
        FailedRoleAssignment: {
            /** Format: uuid */
            roleId?: string;
            reason?: string;
        };
        UserRoleAssignmentResult: {
            /** Format: uuid */
            userId?: string;
            assignedRoles?: string[];
            failedRoles?: components["schemas"]["FailedRoleAssignment"][];
            /** Format: int32 */
            totalAssigned?: number;
        };
        UpdateTenantRequest: {
            name: string;
        };
        TenantResponse: {
            /** Format: uuid */
            id?: string;
            slug?: string;
            name?: string;
            auth0OrgId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            active?: boolean;
        };
        TableUpdateRequest: {
            name?: string;
            description?: string;
            propertyOrder?: string[];
            icon?: string;
            color?: string;
            settings?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
        };
        PropertyDefinitionDto: {
            key: string;
            /** @enum {string} */
            type: "text" | "long_text" | "number" | "checkbox" | "date" | "datetime" | "select" | "multi_select" | "email" | "url" | "file" | "relation";
            displayName: string;
            config?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            required?: boolean;
            defaultValue?: components["schemas"]["JsonElement"];
            description?: string;
        };
        TableResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            workspaceId?: string;
            name?: string;
            description?: string;
            properties?: {
                [key: string]: components["schemas"]["PropertyDefinitionDto"];
            };
            propertyOrder?: string[];
            /** Format: int64 */
            recordCount?: number;
            icon?: string;
            color?: string;
            settings?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            orderedProperties?: components["schemas"]["PropertyDefinitionDto"][];
        };
        PropertyUpdateRequest: {
            displayName?: string;
            config?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            required?: boolean;
            defaultValue?: components["schemas"]["JsonElement"];
            description?: string;
        };
        PropertyReorderRequest: {
            order: string[];
        };
        GeneralRule: components["schemas"]["PermissionRule"];
        PermissionRule: {
            /** @enum {string} */
            resourceType?: "TABLE" | "RECORD" | "DOCUMENT" | "DIRECTORY" | "WORKSPACE" | "TENANT" | "USER" | "ROLE" | "PROPERTY_TYPE" | "RESOURCE_GROUP" | "SETTINGS";
            /** @enum {string} */
            action?: "VIEW" | "CREATE" | "EDIT" | "DELETE" | "MANAGE" | "EXPORT" | "IMPORT";
            /** @enum {string} */
            scope?: "ALL" | "TEAM" | "OWN" | "RESOURCE_GROUP" | "RESOURCE_ID";
        };
        PermissionSyncRequest: {
            permissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        ResourceGroupRule: components["schemas"]["PermissionRule"] & {
            /** Format: uuid */
            groupId?: string;
        };
        ResourceIdRule: components["schemas"]["PermissionRule"] & {
            /** Format: uuid */
            resourceId?: string;
        };
        PermissionSyncResult: {
            added?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            removed?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            unchanged?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        RoleUpdateRequest: {
            displayName?: string;
            color?: string;
            /** Format: int32 */
            position?: number;
        };
        RoleResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            tenantId?: string;
            name?: string;
            displayName?: string;
            color?: string;
            /** Format: int32 */
            position?: number;
            permissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            /** Format: int32 */
            userCount?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            system?: boolean;
        };
        RolePositionUpdate: {
            /** Format: uuid */
            roleId?: string;
            /** Format: int32 */
            position?: number;
        };
        RoleReorderRequest: {
            positions?: components["schemas"]["RolePositionUpdate"][];
        };
        RecordUpdateRequest: {
            data: components["schemas"]["JsonObject"];
            merge?: boolean;
        };
        RecordResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            tableId?: string;
            data?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            /** Format: float */
            position?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            primaryFieldValue?: components["schemas"]["JsonElement"];
        };
        RecordMoveRequest: {
            /** Format: uuid */
            afterRecordId?: string;
            /** Format: uuid */
            beforeRecordId?: string;
            movingToFirst?: boolean;
            movingToLast?: boolean;
        };
        RecordReorderRequest: {
            recordIds: string[];
        };
        RecordListResponse: {
            records?: components["schemas"]["RecordResponse"][];
            /** Format: int64 */
            totalCount?: number;
            /** Format: uuid */
            tableId?: string;
        };
        RecordBulkFieldUpdateRequest: {
            recordIds: string[];
            field: string;
            value?: components["schemas"]["JsonElement"];
            clearingField?: boolean;
        };
        RecordBatchError: {
            /** Format: uuid */
            recordId?: string;
            /** Format: int32 */
            index?: number;
            data?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            error?: string;
            validationErrors?: components["schemas"]["RecordValidationError"][];
        };
        RecordBatchResponse: {
            succeeded?: components["schemas"]["RecordResponse"][];
            failed?: components["schemas"]["RecordBatchError"][];
            /** Format: int32 */
            totalProcessed?: number;
            /** Format: int32 */
            successCount?: number;
            /** Format: int32 */
            failureCount?: number;
            completeSuccess?: boolean;
            completeFailure?: boolean;
            partialSuccess?: boolean;
            /** Format: double */
            successRate?: number;
        };
        RecordValidationError: {
            field?: string;
            message?: string;
            value?: unknown;
        };
        RecordBatchUpdateRequest: {
            updates: {
                [key: string]: components["schemas"]["JsonObject"];
            };
            merge?: boolean;
            /** Format: int32 */
            batchSize?: number;
            recordIds?: string[];
        };
        WorkspaceCreateRequest: {
            name: string;
            description?: string;
            settings?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            validName?: boolean;
        };
        CreateTenantRequest: {
            slug: string;
            name: string;
            auth0OrgId?: string;
        };
        TableCreateRequest: {
            /** Format: uuid */
            workspaceId: string;
            name: string;
            description?: string;
            properties?: components["schemas"]["PropertyDefinitionDto"][];
            templateName?: string;
            icon?: string;
            color?: string;
            propertiesMap?: {
                [key: string]: components["schemas"]["PropertyDefinitionDto"];
            };
        };
        PropertyAddRequest: {
            definition: components["schemas"]["PropertyDefinitionDto"];
            /** Format: int32 */
            position?: number;
        };
        TableImportRequest: {
            format: string;
            records?: components["schemas"]["JsonObject"][];
            csvData?: string;
            skipHeader?: boolean;
            fieldMapping?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            updateExisting?: boolean;
            upsertKey?: string;
            upsert?: boolean;
        };
        ImportError: {
            /** Format: int32 */
            row?: number;
            field?: string;
            value?: unknown;
            message?: string;
            recordData?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
        };
        TableImportResponse: {
            /** Format: uuid */
            tableId?: string;
            tableName?: string;
            /** Format: int64 */
            importedCount?: number;
            /** Format: int64 */
            updatedCount?: number;
            /** Format: int64 */
            failedCount?: number;
            errors?: components["schemas"]["ImportError"][];
            /** Format: date-time */
            importedAt?: string;
        };
        TableDuplicateRequest: {
            name: string;
            includeRecords?: boolean;
            /** Format: uuid */
            targetWorkspaceId?: string;
        };
        RoleCreateRequestDto: {
            name?: string;
            displayName?: string;
            color?: string;
            /** Format: int32 */
            position?: number;
            permissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        PermissionGrantRequest: {
            permissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        FailedPermissionGrant: {
            permission?: components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"];
            reason?: string;
        };
        PermissionGrantResult: {
            /** Format: uuid */
            roleId?: string;
            granted?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            failed?: components["schemas"]["FailedPermissionGrant"][];
            /** Format: int32 */
            totalGranted?: number;
        };
        InvalidPermission: {
            input?: string;
            reason?: string;
        };
        PermissionValidationResult: {
            valid?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            invalid?: components["schemas"]["InvalidPermission"][];
            warnings?: components["schemas"]["PermissionWarning"][];
        };
        PermissionWarning: {
            rule?: components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"];
            message?: string;
        };
        PermissionCopyRequest: {
            overwrite?: boolean;
        };
        RoleDuplicateRequest: {
            newName?: string;
            includePermissions?: boolean;
        };
        RecordCreateRequest: {
            /** Format: uuid */
            tableId: string;
            data: components["schemas"]["JsonObject"];
            /** Format: float */
            position?: number;
        };
        RecordValidateRequest: {
            /** Format: uuid */
            tableId: string;
            data: components["schemas"]["JsonObject"];
            /** Format: uuid */
            recordId?: string;
            partial?: boolean;
            partialValidation?: boolean;
            fullValidation?: boolean;
        };
        RecordValidationResponse: {
            valid?: boolean;
            errors?: components["schemas"]["RecordValidationError"][];
            warnings?: components["schemas"]["RecordValidationWarning"][];
            processedData?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
        };
        RecordValidationWarning: {
            field?: string;
            message?: string;
            suggestedValue?: components["schemas"]["JsonElement"];
        };
        RecordSearchFilter: {
            field?: string;
            /** @enum {string} */
            operator?: "eq" | "neq" | "gt" | "gte" | "lt" | "lte" | "between" | "in" | "not_in" | "contains" | "starts_with" | "ends_with" | "is_null" | "is_not_null";
            value?: components["schemas"]["JsonElement"];
            values?: components["schemas"]["JsonElement"][];
            rangeFilter?: boolean;
            textFilter?: boolean;
        };
        RecordSearchRequest: {
            query?: string;
            filters?: components["schemas"]["RecordSearchFilter"][];
            fields?: string[];
            sort?: components["schemas"]["RecordSortRequest"][];
            /** Format: int32 */
            limit?: number;
            includeArchived?: boolean;
        };
        RecordSortRequest: {
            field?: string;
            /** @enum {string} */
            direction?: "asc" | "desc";
        };
        RecordFilterRequest: {
            filters?: {
                values?: components["schemas"]["JsonElement"][];
                empty?: boolean;
                /** Format: int32 */
                size?: number;
                entries?: {
                    value?: components["schemas"]["JsonElement"];
                    key?: string;
                }[];
                keys?: string[];
            } & {
                [key: string]: components["schemas"]["JsonElement"];
            };
            sort?: components["schemas"]["RecordSortRequest"];
            fields?: string[];
        };
        PageResponseRecordResponse: {
            content?: components["schemas"]["RecordResponse"][];
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
        };
        RecordCopyRequest: {
            recordIds: string[];
            /** Format: uuid */
            targetTableId?: string;
            includeData?: boolean;
            fieldMapping?: {
                [key: string]: string;
            };
            crossTableCopy?: boolean;
        };
        RecordCopyResponse: {
            originalIds?: string[];
            copiedRecords?: components["schemas"]["RecordResponse"][];
            mapping?: {
                [key: string]: string;
            };
            /** Format: int32 */
            copyCount?: number;
        };
        RecordBatchCreateRequest: {
            /** Format: uuid */
            tableId: string;
            records: components["schemas"]["JsonObject"][];
            /** Format: int32 */
            batchSize?: number;
            withinSizeLimit?: boolean;
        };
        SetupRequest: {
            tenantName?: string;
            /** @enum {string} */
            tenantType?: "PERSONAL" | "TEAM" | "ENTERPRISE";
            userProfile?: components["schemas"]["UserProfileDto"];
        };
        UserProfileDto: {
            displayName?: string;
            email?: string;
            avatarUrl?: string;
        };
        SetupResponse: {
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            tenantId?: string;
            /** Format: uuid */
            tenantUserId?: string;
            tenant?: components["schemas"]["TenantDto"];
            user?: components["schemas"]["UserDto"];
            message?: string;
        };
        TenantDto: {
            /** Format: uuid */
            id?: string;
            name?: string;
            /** @enum {string} */
            type?: "PERSONAL" | "TEAM" | "ENTERPRISE";
            orgId?: string;
            active?: boolean;
        };
        UserDto: {
            /** Format: uuid */
            id?: string;
            auth0Sub?: string;
            email?: string;
            displayName?: string;
            avatarUrl?: string;
            active?: boolean;
        };
        SimpleSetupResponse: {
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            tenantId?: string;
            tenantName?: string;
            success?: boolean;
            message?: string;
        };
        WorkspaceListResponse: {
            workspaces?: components["schemas"]["WorkspaceResponse"][];
            /** Format: int64 */
            totalCount?: number;
            hasMore?: boolean;
        };
        WorkspaceStatistics: {
            /** Format: int32 */
            totalTables?: number;
            /** Format: int64 */
            totalRecords?: number;
            /** Format: int32 */
            totalUsers?: number;
            /** Format: int64 */
            storageUsed?: number;
            /** Format: date-time */
            lastActivity?: string;
        };
        UserSearchResponse: {
            users?: components["schemas"]["UserResponse"][];
            /** Format: int64 */
            totalCount?: number;
            hasMore?: boolean;
        };
        UserDetailResponse: {
            /** Format: uuid */
            id?: string;
            auth0Sub?: string;
            email?: string;
            profile?: components["schemas"]["UserProfileResponse"];
            /** Format: int32 */
            tenantCount?: number;
            /** Format: int32 */
            roleCount?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CurrentUserResponse: {
            user?: components["schemas"]["UserDetailResponse"];
            /** Format: uuid */
            currentTenantId?: string;
            permissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        RolePermissions: {
            roleName?: string;
            permissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        UserPermissionsResponse: {
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            tenantUserId?: string;
            roles?: components["schemas"]["RoleResponse"][];
            effectivePermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            permissionsByRole?: components["schemas"]["RolePermissions"][];
        };
        FieldStatistics: {
            fieldKey?: string;
            fieldType?: string;
            /** Format: int64 */
            totalCount?: number;
            /** Format: int64 */
            nonNullCount?: number;
            /** Format: int64 */
            nullCount?: number;
            /** Format: double */
            fillRate?: number;
            /** Format: int64 */
            uniqueCount?: number;
            minValue?: unknown;
            maxValue?: unknown;
            /** Format: double */
            avgValue?: number;
            mostFrequent?: components["schemas"]["FrequencyItem"][];
        };
        FrequencyItem: {
            value?: unknown;
            /** Format: int64 */
            count?: number;
            /** Format: double */
            percentage?: number;
        };
        TableStatisticsResponse: {
            /** Format: uuid */
            tableId?: string;
            tableName?: string;
            /** Format: int64 */
            recordCount?: number;
            /** Format: int32 */
            propertyCount?: number;
            fieldStatistics?: components["schemas"]["FieldStatistics"][];
            /** Format: int64 */
            storageSize?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            lastRecordCreatedAt?: string;
            /** Format: date-time */
            lastRecordUpdatedAt?: string;
        };
        TableSchemaResponse: {
            /** Format: uuid */
            id?: string;
            name?: string;
            description?: string;
            properties?: {
                [key: string]: components["schemas"]["PropertyDefinitionDto"];
            };
            propertyOrder?: string[];
            version?: string;
            /** Format: date-time */
            exportedAt?: string;
        };
        TableExportResponse: {
            /** Format: uuid */
            tableId?: string;
            tableName?: string;
            format?: string;
            schema?: components["schemas"]["TableSchemaResponse"];
            records?: components["schemas"]["JsonObject"][];
            data?: string;
            /** Format: int64 */
            recordCount?: number;
            /** Format: date-time */
            exportedAt?: string;
        };
        TableListResponse: {
            tables?: components["schemas"]["TableResponse"][];
            /** Format: int64 */
            totalCount?: number;
        };
        EffectivePermissionsResponse: {
            directPermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            effectivePermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        RolePermissionDiff: {
            onlyInFirst?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            onlyInSecond?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            common?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        PermissionCheckResult: {
            rule?: components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"];
            hasPermission?: boolean;
            matchedBy?: string;
        };
        MyWorkspacesResponse: {
            workspaces?: components["schemas"]["WorkspaceDto"][];
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            activeCount?: number;
        };
        WorkspaceDto: {
            /** Format: uuid */
            id?: string;
            name?: string;
            displayName?: string;
            role?: string;
            /** Format: date-time */
            lastAccessedAt?: string;
            active?: boolean;
        };
        AuthTestResponse: {
            message?: string;
            endpoint?: string;
            userRoles?: components["schemas"]["RoleResponse"][];
            userId?: string;
            /** @enum {string} */
            testResult?: "SUCCESS" | "FAILED" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND";
        };
        PublicTestResponse: {
            message?: string;
            endpoint?: string;
            /** @enum {string} */
            testResult?: "SUCCESS" | "FAILED" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND";
        };
        PermissionTestResponse: {
            message?: string;
            endpoint?: string;
            requiredPermission?: components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"];
            userPermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            hasRequiredPermission?: boolean;
            userId?: string;
            /** @enum {string} */
            testResult?: "SUCCESS" | "FAILED" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND";
        };
        MultiPermissionTestResponse: {
            message?: string;
            endpoint?: string;
            requiredPermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            userPermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            matchedPermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            hasAnyRequiredPermission?: boolean;
            userId?: string;
            /** @enum {string} */
            testResult?: "SUCCESS" | "FAILED" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND";
        };
        HybridAuthTestResponse: {
            message?: string;
            endpoint?: string;
            authMethod?: string;
            userRoles?: components["schemas"]["RoleResponse"][];
            userPermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            userId?: string;
            /** @enum {string} */
            testResult?: "SUCCESS" | "FAILED" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND";
        };
        AuthenticatedTestResponse: {
            message?: string;
            endpoint?: string;
            userRoles?: components["schemas"]["RoleResponse"][];
            userPermissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
            userId?: string;
            /** @enum {string} */
            testResult?: "SUCCESS" | "FAILED" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND";
        };
        MyTenantsResponse: {
            tenants?: components["schemas"]["UserTenantDto"][];
            /** Format: uuid */
            defaultTenantId?: string;
        };
        UserTenantDto: {
            /** Format: uuid */
            tenantId?: string;
            tenantName?: string;
            orgId?: string;
            roles?: string[];
            joinedAt?: string;
            active?: boolean;
        };
        JwtClaimsResponse: {
            sub?: string;
            email?: string;
            emailVerified?: boolean;
            name?: string;
            picture?: string;
            aud?: string[];
            iss?: string;
            /** Format: date-time */
            iat?: string;
            /** Format: date-time */
            exp?: string;
            scope?: string;
        };
        AuthenticatedContextDto: {
            auth0Sub?: string;
            /** Format: uuid */
            userId?: string;
            /** Format: uuid */
            tenantUserId?: string;
            /** Format: uuid */
            tenantId?: string;
            roles?: string[];
            email?: string;
            active?: boolean;
        };
        BusinessContextResponse: {
            authenticatedContext?: components["schemas"]["AuthenticatedContextDto"];
            springSecurityAuthorities?: string[];
            rawJwtClaims?: components["schemas"]["RawJwtClaimsDto"];
        };
        RawJwtClaimsDto: {
            orgId?: string;
            customTenantId?: string;
            roles?: string[];
        };
        PermissionBulkDeleteRequest: {
            permissions?: (components["schemas"]["GeneralRule"] | components["schemas"]["ResourceGroupRule"] | components["schemas"]["ResourceIdRule"])[];
        };
        RecordBatchDeleteRequest: {
            recordIds: string[];
            /** Format: int32 */
            batchSize?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getWorkspace: {
        parameters: {
            query?: {
                /** @description Include detailed information */
                detailed?: boolean;
            };
            header?: never;
            path: {
                /** @description Workspace ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved workspace */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    updateWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceUpdateRequest"];
            };
        };
        responses: {
            /** @description Workspace updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Workspace name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
        };
    };
    deleteWorkspace: {
        parameters: {
            query?: {
                /** @description Force delete even if not empty */
                force?: boolean;
            };
            header?: never;
            path: {
                /** @description Workspace ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Workspace deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Workspace not empty or in use */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User information retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentUserResponse"];
                };
            };
            /** @description Unauthorized - invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentUserResponse"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentUserResponse"];
                };
            };
        };
    };
    updateCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateRequest"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Email already in use */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    getCurrentUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Profile not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
        };
    };
    updateCurrentUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description Profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Profile created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
        };
    };
    getUserRoles: {
        parameters: {
            query?: {
                includePermissions?: boolean;
            };
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
        };
    };
    setUserRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleAssignmentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRoleAssignmentResult"];
                };
            };
        };
    };
    assignRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleAssignmentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRoleAssignmentResult"];
                };
            };
        };
    };
    getTenantById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    updateTenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTenantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    deactivateTenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    getTable: {
        parameters: {
            query?: {
                /** @description Include record count */
                includeRecordCount?: boolean;
            };
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved table */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    updateTable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TableUpdateRequest"];
            };
        };
        responses: {
            /** @description Table updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    deleteTable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Table deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Table in use or deletion restricted */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
                /** @description Property key */
                key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PropertyUpdateRequest"];
            };
        };
        responses: {
            /** @description Property updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Invalid property definition */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table or property not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    removeProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
                /** @description Property key */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Property removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table or property not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    reorderProperties: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PropertyReorderRequest"];
            };
        };
        responses: {
            /** @description Properties reordered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Invalid property order */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    getPermissions: {
        parameters: {
            query?: {
                detailed?: boolean;
            };
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    syncPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionSyncRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionSyncResult"];
                };
            };
        };
    };
    grantPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionGrantResult"];
                };
            };
        };
    };
    revokePermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionBulkDeleteRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRole: {
        parameters: {
            query?: {
                includePermissions?: boolean;
                includeUserCount?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
        };
    };
    updateRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
        };
    };
    deleteRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reorderRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleReorderRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Record ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
        };
    };
    updateRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Record ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordUpdateRequest"];
            };
        };
        responses: {
            /** @description Record updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Invalid record data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
        };
    };
    deleteRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Record ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Record deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    moveRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Record ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordMoveRequest"];
            };
        };
        responses: {
            /** @description Record moved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Invalid move request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
        };
    };
    reorderRecords: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                tableId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordReorderRequest"];
            };
        };
        responses: {
            /** @description Records reordered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Invalid reorder request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
        };
    };
    bulkUpdateField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordBulkFieldUpdateRequest"];
            };
        };
        responses: {
            /** @description Field updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordBatchResponse"];
                };
            };
            /** @description Invalid request or exceeds batch limit */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordBatchResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordBatchResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordBatchResponse"];
                };
            };
            /** @description Record not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordBatchResponse"];
                };
            };
        };
    };
    updateRecordsBatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordBatchUpdateRequest"];
            };
        };
        responses: {
            /** @description Records updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Invalid record data or batch size exceeded */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description One or more records not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
        };
    };
    createRecordsBatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordBatchCreateRequest"];
            };
        };
        responses: {
            /** @description Records created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Invalid record data or batch size exceeded */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
        };
    };
    deleteRecordsBatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordBatchDeleteRequest"];
            };
        };
        responses: {
            /** @description Records deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request or batch size exceeded */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listWorkspaces: {
        parameters: {
            query?: {
                /** @description Include table counts */
                includeCounts?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved workspaces */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceListResponse"];
                };
            };
        };
    };
    createWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceCreateRequest"];
            };
        };
        responses: {
            /** @description Workspace created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Workspace name already exists or limit exceeded */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
        };
    };
    createDefaultWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default workspace created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
            /** @description Default workspace already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceResponse"];
                };
            };
        };
    };
    syncWithAuth0: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    checkMyResourceAccess: {
        parameters: {
            query: {
                resourceId: string;
                resourceType: string;
                action: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    getAllTenants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"][];
                };
            };
        };
    };
    createTenant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTenantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    linkAuth0Organization: {
        parameters: {
            query: {
                auth0OrgId: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    activateTenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    createTable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TableCreateRequest"];
            };
        };
        responses: {
            /** @description Table created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table name already exists or limit exceeded */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    addProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PropertyAddRequest"];
            };
        };
        responses: {
            /** @description Property added successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Invalid property definition */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Property key already exists or limit exceeded */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    importData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TableImportRequest"];
            };
        };
        responses: {
            /** @description Data imported successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableImportResponse"];
                };
            };
            /** @description Invalid import data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableImportResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableImportResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableImportResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableImportResponse"];
                };
            };
        };
    };
    duplicateTable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TableDuplicateRequest"];
            };
        };
        responses: {
            /** @description Table duplicated successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table name already exists or limit exceeded */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    createTableFromTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TableCreateRequest"];
            };
        };
        responses: {
            /** @description Table created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Invalid template or request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
            /** @description Table name already exists or limit exceeded */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableResponse"];
                };
            };
        };
    };
    getRoles: {
        parameters: {
            query?: {
                includePermissions?: boolean;
                includeUserCount?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
        };
    };
    createRole: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
        };
    };
    validatePermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionGrantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionValidationResult"];
                };
            };
        };
    };
    copyPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
                sourceRoleId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PermissionCopyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    duplicateRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleDuplicateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"];
                };
            };
        };
    };
    validateRoleCreation: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    createRecord: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordCreateRequest"];
            };
        };
        responses: {
            /** @description Record created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Invalid record data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordResponse"];
                };
            };
        };
    };
    validateRecordData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordValidateRequest"];
            };
        };
        responses: {
            /** @description Validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordValidationResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordValidationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordValidationResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordValidationResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordValidationResponse"];
                };
            };
        };
    };
    searchRecords: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                tableId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordSearchRequest"];
            };
        };
        responses: {
            /** @description Search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Invalid search parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordListResponse"];
                };
            };
        };
    };
    filterRecords: {
        parameters: {
            query?: {
                /** @description Page number (0-based) */
                page?: number;
                /** @description Page size */
                size?: number;
            };
            header?: never;
            path: {
                /** @description Table ID */
                tableId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordFilterRequest"];
            };
        };
        responses: {
            /** @description Successfully filtered records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Invalid filter criteria */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
        };
    };
    copyRecords: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecordCopyRequest"];
            };
        };
        responses: {
            /** @description Records copied successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordCopyResponse"];
                };
            };
            /** @description Invalid request or exceeds copy limit */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordCopyResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordCopyResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordCopyResponse"];
                };
            };
            /** @description Record or table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecordCopyResponse"];
                };
            };
        };
    };
    completeSetup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetupRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetupResponse"];
                };
            };
        };
    };
    createDefaultWorkspace_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleSetupResponse"];
                };
            };
        };
    };
    getWorkspaceStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Workspace ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceStatistics"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceStatistics"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceStatistics"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceStatistics"];
                };
            };
        };
    };
    getWorkspaceQuota: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved quota */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSearchResponse"];
                };
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetailResponse"];
                };
            };
        };
    };
    getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
        };
    };
    getUserPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPermissionsResponse"];
                };
            };
        };
    };
    getMyRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
        };
    };
    getMyPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPermissionsResponse"];
                };
            };
        };
    };
    checkMyPermission: {
        parameters: {
            query: {
                permission: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    getTenantBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    getCurrentTenant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"];
                };
            };
        };
    };
    getActiveTenants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantResponse"][];
                };
            };
        };
    };
    getTableStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableStatisticsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableStatisticsResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableStatisticsResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableStatisticsResponse"];
                };
            };
        };
    };
    getTableSchema: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved schema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableSchemaResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableSchemaResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableSchemaResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableSchemaResponse"];
                };
            };
        };
    };
    exportTable: {
        parameters: {
            query?: {
                /** @description Export format (json, csv) */
                format?: string;
                /** @description Include records in export */
                includeRecords?: boolean;
            };
            header?: never;
            path: {
                /** @description Table ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Table exported successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableExportResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableExportResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableExportResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableExportResponse"];
                };
            };
        };
    };
    listTables: {
        parameters: {
            query?: {
                /** @description Include record counts */
                includeRecordCounts?: boolean;
            };
            header?: never;
            path: {
                /** @description Workspace ID */
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved tables */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableListResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableListResponse"];
                };
            };
            /** @description Workspace not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableListResponse"];
                };
            };
        };
    };
    getPermissionSuggestions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    getEffectivePermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EffectivePermissionsResponse"];
                };
            };
        };
    };
    comparePermissions: {
        parameters: {
            query: {
                with: string;
            };
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolePermissionDiff"];
                };
            };
        };
    };
    checkPermission: {
        parameters: {
            query: {
                permission: string;
            };
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionCheckResult"];
                };
            };
        };
    };
    exportRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    searchRoles: {
        parameters: {
            query: {
                q: string;
                includePermissions?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
        };
    };
    getRolesByPermission: {
        parameters: {
            query: {
                permission: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponse"][];
                };
            };
        };
    };
    listRecords: {
        parameters: {
            query?: {
                /** @description Page number (0-based) */
                page?: number;
                /** @description Page size */
                size?: number;
                /** @description Sort field */
                sortBy?: string;
                /** @description Sort direction (ASC/DESC) */
                sortDirection?: string;
            };
            header?: never;
            path: {
                /** @description Table ID */
                tableId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
        };
    };
    getRecordsPaged: {
        parameters: {
            query?: {
                /** @description Page number (0-based) */
                page?: number;
                /** @description Page size */
                size?: number;
                /** @description Sort field */
                sortBy?: string;
                /** @description Sort direction (ASC/DESC) */
                sortDirection?: string;
            };
            header?: never;
            path: {
                /** @description Table ID */
                tableId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Invalid pagination parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageResponseRecordResponse"];
                };
            };
        };
    };
    countRecords: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Table ID */
                tableId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
        };
    };
    getMyWorkspaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved accessible workspaces */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyWorkspacesResponse"];
                };
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyWorkspacesResponse"];
                };
            };
            /** @description Forbidden - setup mode users cannot access workspaces */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyWorkspacesResponse"];
                };
            };
        };
    };
    getMyTenants: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved accessible tenants */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyWorkspacesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyWorkspacesResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyWorkspacesResponse"];
                };
            };
        };
    };
    viewerOnly: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTestResponse"];
                };
            };
        };
    };
    userOnly: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTestResponse"];
                };
            };
        };
    };
    publicEndpoint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicTestResponse"];
                };
            };
        };
    };
    tableView: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionTestResponse"];
                };
            };
        };
    };
    tableDelete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionTestResponse"];
                };
            };
        };
    };
    settingsManage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionTestResponse"];
                };
            };
        };
    };
    documentViewTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionTestResponse"];
                };
            };
        };
    };
    documentEditOwn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionTestResponse"];
                };
            };
        };
    };
    anyView: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultiPermissionTestResponse"];
                };
            };
        };
    };
    tableCreateHybrid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HybridAuthTestResponse"];
                };
            };
        };
    };
    authenticatedEndpoint: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticatedTestResponse"];
                };
            };
        };
    };
    adminOrUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTestResponse"];
                };
            };
        };
    };
    adminOnly: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthTestResponse"];
                };
            };
        };
    };
    getMyTenants_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyTenantsResponse"];
                };
            };
        };
    };
    getCurrentUser_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    getJwtClaims: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JwtClaimsResponse"];
                };
            };
        };
    };
    getBusinessContext: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessContextResponse"];
                };
            };
        };
    };
    removeRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    revokePermission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
                permission: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    revokeAllPermissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    clearTable: {
        parameters: {
            query: {
                /** @description Confirmation flag */
                confirm: boolean;
            };
            header?: never;
            path: {
                /** @description Table ID */
                tableId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Table cleared successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Table not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
