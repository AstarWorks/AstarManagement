/**
 * Workspace Form Management Composable
 * „ÉØ„Éº„ÇØ„Çπ„Éö„Éº„Çπ„Éï„Ç©„Éº„É†„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„Å®„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„ÇíÊãÖÂΩì
 */

import { reactive, computed } from 'vue'
import type { WorkspaceResponse, WorkspaceCreateRequest, WorkspaceUpdateRequest } from '~/modules/workspace/types'
import { workspaceFormSchema, defaultWorkspaceForm, type WorkspaceFormData } from '~/modules/workspace/validators/workspace.schema'
import type { ZodError } from 'zod'

export const useWorkspaceForm = () => {
  // „Éï„Ç©„Éº„É†„Éá„Éº„Çø
  const formData = reactive<WorkspaceFormData>({ ...defaultWorkspaceForm })
  
  // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº
  const errors = reactive<Partial<Record<keyof WorkspaceFormData, string>>>({})
  
  // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥Áä∂ÊÖã
  const isValid = computed(() => {
    try {
      workspaceFormSchema.parse(formData)
      return Object.keys(errors).length === 0
    } catch {
      return false
    }
  })

  /**
   * „Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
   */
  const resetForm = () => {
    Object.assign(formData, defaultWorkspaceForm)
    Object.keys(errors).forEach(key => {
      errors[key as keyof WorkspaceFormData] = undefined
    })
  }

  /**
   * Êó¢Â≠ò„ÅÆ„ÉØ„Éº„ÇØ„Çπ„Éö„Éº„Çπ„Éá„Éº„Çø„Åß„Éï„Ç©„Éº„É†„ÇíÂàùÊúüÂåñ
   */
  const initializeForm = (workspace: WorkspaceResponse) => {
    const settings = getWorkspaceSettings(workspace)
    
    formData.name = workspace.name || ''
    formData.description = workspace.description || ''
    formData.icon = settings.icon || 'üìÅ'
    formData.color = settings.color || '#3B82F6'
    
    // „Ç®„É©„Éº„Çí„ÇØ„É™„Ç¢
    Object.keys(errors).forEach(key => {
      errors[key as keyof WorkspaceFormData] = undefined
    })
  }

  /**
   * „Éï„Ç©„Éº„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
   */
  const validateForm = (): boolean => {
    // „Ç®„É©„Éº„Çí„ÇØ„É™„Ç¢
    Object.keys(errors).forEach(key => {
      errors[key as keyof WorkspaceFormData] = undefined
    })

    try {
      workspaceFormSchema.parse(formData)
      return true
    } catch (error) {
      if (error instanceof Error && 'issues' in error) {
        const zodError = error as ZodError
        zodError.issues.forEach(issue => {
          if (issue.path.length > 0) {
            const field = issue.path[0] as keyof WorkspaceFormData
            errors[field] = issue.message
          }
        })
      }
      return false
    }
  }

  /**
   * ‰ΩúÊàêÁî®„É™„ÇØ„Ç®„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê
   */
  const toCreateRequest = (): WorkspaceCreateRequest => {
    return {
      name: formData.name,
      description: formData.description || undefined,
      settings: {
        icon: formData.icon,
        color: formData.color
      }
    }
  }

  /**
   * Êõ¥Êñ∞Áî®„É™„ÇØ„Ç®„Çπ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê
   */
  const toUpdateRequest = (): WorkspaceUpdateRequest => {
    return {
      name: formData.name,
      description: formData.description || undefined,
      settings: {
        icon: formData.icon,
        color: formData.color
      }
    }
  }

  /**
   * ÂûãÂÆâÂÖ®„Å™„ÉØ„Éº„ÇØ„Çπ„Éö„Éº„ÇπË®≠ÂÆö„ÅÆÂèñÂæó
   */
  const getWorkspaceSettings = (workspace: WorkspaceResponse): { icon?: string; color?: string } => {
    if (!workspace.settings || typeof workspace.settings !== 'object') {
      return {}
    }
    
    const settings = workspace.settings as Record<string, unknown>
    return {
      icon: typeof settings.icon === 'string' ? settings.icon : undefined,
      color: typeof settings.color === 'string' ? settings.color : undefined
    }
  }

  /**
   * ÁâπÂÆö„Éï„Ç£„Éº„É´„Éâ„ÅÆ„Ç®„É©„Éº„ÇíÂèñÂæó
   */
  const getFieldError = (field: keyof WorkspaceFormData): string | undefined => {
    return errors[field]
  }

  /**
   * ÁâπÂÆö„Éï„Ç£„Éº„É´„Éâ„Å´„Ç®„É©„Éº„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
   */
  const hasFieldError = (field: keyof WorkspaceFormData): boolean => {
    return Boolean(errors[field])
  }

  return {
    // State
    formData: readonly(formData),
    errors: readonly(errors),
    isValid,

    // Actions
    resetForm,
    initializeForm,
    validateForm,
    toCreateRequest,
    toUpdateRequest,
    getWorkspaceSettings,
    getFieldError,
    hasFieldError
  }
}