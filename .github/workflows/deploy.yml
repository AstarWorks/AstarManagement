name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  ARTIFACT_REGISTRY: us-docker.pkg.dev
  REGISTRY_REPOSITORY: aster-management

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
    
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REGISTRY_REPOSITORY }}/api:${{ github.sha }}
          ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REGISTRY_REPOSITORY }}/api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REGISTRY_REPOSITORY }}/api:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-backend.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-backend.sarif'

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
    
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REGISTRY_REPOSITORY }}/web:${{ github.sha }}
          ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REGISTRY_REPOSITORY }}/web:latest
        build-args: |
          NUXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Update deployment manifests
      run: |
        # Update image tags in Helm values
        sed -i "s|tag: .*|tag: ${{ github.sha }}|g" helm/backend/values-staging.yaml
        sed -i "s|tag: .*|tag: ${{ github.sha }}|g" helm/frontend/values-staging.yaml
    
    - name: Commit and push manifest updates
      uses: EndBug/add-and-commit@v9
      with:
        add: 'helm/'
        message: 'chore: update image tags to ${{ github.sha }}'
        default_author: github_actions
    
    - name: Trigger ArgoCD sync
      run: |
        curl -X POST ${{ secrets.ARGOCD_SERVER }}/api/v1/applications/aster-backend-staging/sync \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"revision":"main","prune":true,"dryRun":false}'
        
        curl -X POST ${{ secrets.ARGOCD_SERVER }}/api/v1/applications/aster-frontend-staging/sync \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"revision":"main","prune":true,"dryRun":false}'
    
    - name: Wait for deployment
      run: |
        # Script to check deployment status
        bash scripts/wait-for-deployment.sh staging 300
    
    - name: Send deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to staging: ${{ job.status }}
          Commit: ${{ github.event.head_commit.message }}
          Author: ${{ github.actor }}
          SHA: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}