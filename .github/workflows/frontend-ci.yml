name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.16'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      workflows: ${{ steps.filter.outputs.workflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '!frontend/node_modules/**'
            workflows:
              - '.github/workflows/frontend-ci.yml'

  lint-and-typecheck:
    name: Lint and TypeCheck
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Run ESLint
        working-directory: frontend
        run: bun run lint

      - name: Run TypeScript type checking
        working-directory: frontend
        run: bun run typecheck

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: frontend-lint-results-${{ github.run_id }}
          path: frontend/eslint-report.json
          retention-days: 7

  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Run unit tests with coverage
        working-directory: frontend
        run: bun run test:run --coverage --reporter=verbose --reporter=junit --outputFile=test-results/junit.xml
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results-${{ github.run_id }}
          path: |
            frontend/test-results/
            frontend/coverage/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: Frontend Coverage
          fail_ci_if_error: false

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            try {
              const coveragePath = 'frontend/coverage/coverage-summary.json';
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const { total } = coverage;
                
                const formatPercent = (value) => value ? `${value.pct}%` : 'N/A';
                
                const body = `
            ## üìä Frontend Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | **Lines** | ${formatPercent(total.lines)} |
            | **Statements** | ${formatPercent(total.statements)} |
            | **Functions** | ${formatPercent(total.functions)} |
            | **Branches** | ${formatPercent(total.branches)} |
            
            ${total.lines.pct < 80 ? '‚ö†Ô∏è Coverage below 80% threshold' : '‚úÖ Coverage meets requirements'}
            `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.log('Could not post coverage report:', error.message);
            }

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Build application
        working-directory: frontend
        run: bun run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-build-artifacts-${{ github.run_id }}
          path: |
            frontend/.output/
            frontend/dist/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        working-directory: frontend
        run: bun install --frozen-lockfile

      - name: Run security audit
        working-directory: frontend
        run: |
          # Bun audit (when available) or npm audit as fallback
          if bun audit --version > /dev/null 2>&1; then
            bun audit --audit-level=moderate
          else
            npm audit --audit-level=moderate --production
          fi
        continue-on-error: true

      - name: License check
        working-directory: frontend
        run: |
          npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD;ISC;0BSD;BSD-2-Clause;BSD-3-Clause;CC0-1.0;Unlicense;WTFPL'
        continue-on-error: true

  summary:
    name: Frontend CI Summary
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck, unit-tests, build-verification, security-audit]
    if: always() && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true')

    steps:
      - name: Frontend CI Summary
        run: |
          echo "## üé® Frontend CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & TypeCheck | ${{ needs.lint-and-typecheck.result == 'success' && '‚úÖ Passed' || needs.lint-and-typecheck.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '‚úÖ Passed' || needs.unit-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result == 'success' && '‚úÖ Passed' || needs.build-verification.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '‚úÖ Passed' || needs.security-audit.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" && "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "üéâ **All frontend checks passed!** The Nuxt.js application is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Some frontend checks failed.** Please review the failed jobs and fix any issues before merging." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Additional context
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Additional Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework**: Nuxt.js 3 with Vue 3 and TypeScript" >> $GITHUB_STEP_SUMMARY
          echo "- **Package Manager**: Bun ${{ env.BUN_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Tool**: Vite with Nuxt" >> $GITHUB_STEP_SUMMARY