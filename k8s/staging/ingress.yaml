apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aster-management-ingress
  namespace: aster-staging
  labels:
    app: aster-management
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/client-max-body-size: "50m"
    # SSL certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-ancestors 'none';";
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    # Backend routing
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  tls:
  - hosts:
    - staging.aster-management.example.com
    secretName: aster-management-tls
  rules:
  - host: staging.aster-management.example.com
    http:
      paths:
      # Frontend routes
      - path: /()(.*)
        pathType: Prefix
        backend:
          service:
            name: aster-frontend-service
            port:
              number: 80
      # API routes
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: aster-backend-service
            port:
              number: 80
      # Health check endpoints
      - path: /health
        pathType: Exact
        backend:
          service:
            name: aster-backend-service
            port:
              number: 80
      # Metrics endpoint (protected)
      - path: /actuator/prometheus
        pathType: Exact
        backend:
          service:
            name: aster-backend-service
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: aster-frontend-service
  namespace: aster-staging
  labels:
    app: aster-frontend
    environment: staging
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: aster-frontend
---
apiVersion: v1
kind: Service
metadata:
  name: aster-backend-service
  namespace: aster-staging
  labels:
    app: aster-backend
    environment: staging
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    prometheus.io/scrape: "true"
    prometheus.io/path: "/actuator/prometheus"
    prometheus.io/port: "8080"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: aster-backend
---
# Certificate for the main domain
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: aster-management-cert
  namespace: aster-staging
  labels:
    app: aster-management
    environment: staging
spec:
  secretName: aster-management-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - staging.aster-management.example.com
  acme:
    config:
    - http01:
        ingressClass: nginx
      domains:
      - staging.aster-management.example.com
---
# Monitoring ingress for Grafana
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  labels:
    app: grafana
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Basic auth for Grafana
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: grafana-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Grafana'
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  tls:
  - hosts:
    - grafana.staging.aster-management.example.com
    secretName: grafana-tls
  rules:
  - host: grafana.staging.aster-management.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-grafana
            port:
              number: 80
---
# Certificate for Grafana
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: grafana-cert
  namespace: monitoring
  labels:
    app: grafana
    environment: staging
spec:
  secretName: grafana-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - grafana.staging.aster-management.example.com
---
# Basic auth secret for Grafana (will be managed by Terraform)
apiVersion: v1
kind: Secret
metadata:
  name: grafana-auth
  namespace: monitoring
  labels:
    app: grafana
    environment: staging
type: Opaque
data:
  # This will be populated by Terraform
  # Format: username:$apr1$encrypted_password
  auth: ""